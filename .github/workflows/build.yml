name: Build

on:
  push:
    branches:
      - master
      - release-*
    tags:
      - v*
    paths-ignore:
      - "**.md"
  pull_request:
    branches:
      - master
      - release-*
    paths-ignore:
      - "**.md"
  workflow_dispatch: {}

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      APP_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
      DEV_VERSION_SUFFIX: 99.99.99
      DOTNET_SAMPLE_APP_IMAGE_NAME: dotnet-azurefunction
      NUPKG_OUTDIR: bin/Release/nugets
    steps:
      - uses: actions/checkout@v2
      - name: Parse release version
        run: python ./.github/scripts/get_release_version.py
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 6.0
      # The MSBuild Copy task does not seem to work on GitHub Actions.
      # This is a workaround to build the nuget packages one by one,
      # and have a manual step to copy the packages to the local-packages folder.
      - name: Build Microsoft.Azure.Functions.Extensions.Dapr.Core
        run: dotnet build src/Microsoft.Azure.Functions.Extensions.Dapr.Core/Microsoft.Azure.Functions.Extensions.Dapr.Core.csproj --configuration release --configfile nuget.config
      - name: Build Microsoft.Azure.WebJobs.Extensions.Dapr
        run: dotnet build src/Microsoft.Azure.WebJobs.Extensions.Dapr/Microsoft.Azure.WebJobs.Extensions.Dapr.csproj --configuration release --configfile nuget.config
      - name: Copy NuGet packages to local-packages folder
        run: |
          mkdir -p local-packages
          cp ${{ env.NUPKG_OUTDIR }}/*.nupkg local-packages
      # Now build the solution and run the tests.
      - name: Build solution - release
        run: dotnet build --configuration release --configfile nuget.config
      - name: Run Unit Tests - release
        run: dotnet test --configuration release --no-build --verbosity normal
      - name: Generate Nuget Packages - release
        run: dotnet pack --configuration release -p:PackageVersion=${REL_VERSION}
        # Since we create local development nuget packages, we need to clean them up.
      - name: Clean up development Nuget packages
        run: rm -rf ${{ env.NUPKG_OUTDIR }}/*${{ env.DEV_VERSION_SUFFIX }}*.nupkg
      - name: Upload artifacts
        uses: actions/upload-artifact@master
        with:
          name: release_drop
          path: ${{ env.NUPKG_OUTDIR }}
      - name: Publish binaries to github for tags
        if: startswith(github.ref, 'refs/tags/v')
        run: |
          sudo npm install --silent --no-progress -g github-release-cli

          # Parse repository to get owner and repo names
          OWNER_NAME="${GITHUB_REPOSITORY%%/*}"
          REPO_NAME="${GITHUB_REPOSITORY#*/}"

          # Get the list of files
          RELEASE_ARTIFACT=(${{ env.NUPKG_OUTDIR }}/*)

          export GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}
          echo "Uploading Nuget packages to GitHub Release"
          github-release upload \
            --owner $OWNER_NAME \
            --repo $REPO_NAME \
            --body "Release dapr azure functions extension v${REL_VERSION}" \
            --tag "v${REL_VERSION}" \
            --name "Dapr Azure Functions Extension v${REL_VERSION}" \
            ${RELEASE_ARTIFACT[*]}
      - name: Publish nuget packages to nuget.org for tags
        if: startswith(github.ref, 'refs/tags/v') && !(endsWith(github.ref, '-rc') || endsWith(github.ref, '-dev') || endsWith(github.ref, '-prerelease'))
        run: |
          dotnet nuget push "${{ env.NUPKG_OUTDIR }}/*.nupkg" --skip-duplicate --api-key ${{ secrets.NUGETORG_DAPR_API_KEY }} --source https://api.nuget.org/v3/index.json
      # The docker image is not pushed for pull requests,
      # but the image is built to ensure that the Dockerfile and the sample app are valid.
      - name: Set a sample app registry when it is a pull request
        if: github.event_name == 'pull_request'
        run: |
          OWNER_NAME="${GITHUB_REPOSITORY%%/*}"
          OWNER_NAME="${OWNER_NAME,,}" # convert to lowercase
          echo "Setting sample app registry to ghcr.io/${OWNER_NAME}"
          echo "APP_REGISTRY=ghcr.io/${OWNER_NAME}" >> $GITHUB_ENV
      - name: Build samples docker images
        run: |
          echo building docker image for ${{ env.DOTNET_SAMPLE_APP_IMAGE_NAME }}
          docker build -f samples/dotnet-azurefunction/Dockerfile -t ${{ env.APP_REGISTRY }}/${{ env.DOTNET_SAMPLE_APP_IMAGE_NAME }}:${{ env.REL_VERSION }} .
      - name: Push samples docker images
        if: github.event_name != 'pull_request'
        run: |
          echo performing docker login 
          docker login -u ${{ secrets.DOCKER_REGISTRY_ID }} -p ${{ secrets.DOCKER_REGISTRY_PASS }}
          echo pushing docker image for ${{ env.DOTNET_SAMPLE_APP_IMAGE_NAME }}
          echo image with tag ${{ env.APP_REGISTRY }}/${{ env.DOTNET_SAMPLE_APP_IMAGE_NAME }}:${{ env.REL_VERSION }} will be pushed
          docker push ${{ env.APP_REGISTRY }}/${{ env.DOTNET_SAMPLE_APP_IMAGE_NAME }}:${{ env.REL_VERSION }}
